PROJECT ( OpenVDBCore )

IF ( USE_GLFW3 )
  FIND_PACKAGE ( GLFW3 REQUIRED )
  SET ( OPENVDB_USE_GLFW_FLAG "-DOPENVDB_USE_GLFW_3" )
  IF ( UNIX AND NOT APPLE )
	SET ( GLFW_DEPENDENT_LIBRARIES "Xi;Xrandr;Xinerama;Xcursor" )
  ENDIF ( UNIX AND NOT APPLE )
  SET ( GLFW_LINK_LIBRARY ${GLFW3_glfw_LIBRARY} )
  SET ( GLFW_INCLUDE_DIRECTORY  ${GLFW3_INCLUDE_DIR} CACHE STRING "GLFW3 include directory")
ELSE ()
  FIND_PACKAGE ( GLFW REQUIRED )
  IF ( UNIX AND NOT APPLE )
	SET ( GLFW_DEPENDENT_LIBRARIES "Xi;Xrandr;Xinerama;Xcursor" )
  ENDIF ()
  SET ( GLFW_LINK_LIBRARY ${GLFW_glfw_LIBRARY} )
  SET ( GLFW_INCLUDE_DIRECTORY  ${GLFW_INCLUDE_DIR} CACHE STRING "GLFW include directory")
ENDIF ()

IF (WIN32)
  FIND_PACKAGE ( GLEW REQUIRED )
ENDIF()
IF (OPENVDB_BUILD_PYTHON_MODULE)
  FIND_PACKAGE ( PythonInterp REQUIRED )
  FIND_PACKAGE ( PythonLibs REQUIRED )
  SET ( OPENVDB_BOOST_PYTHON_LIBRARY_COMPONENT_NAME python )
  INCLUDE_DIRECTORIES ( ${PYTHON_INCLUDE_DIR} )
  MESSAGE ( "PYTHONLIBS_VERSION_STRING = ${PYTHONLIBS_VERSION_STRING}" )

  STRING(REPLACE "." ";" VERSION_LIST ${PYTHONLIBS_VERSION_STRING})
  LIST(GET VERSION_LIST 0 OPENVDB_PYTHON_VERSION_MAJOR)
  LIST(GET VERSION_LIST 1 OPENVDB_PYTHON_VERSION_MINOR)
  LIST(GET VERSION_LIST 2 OPENVDB_PYTHON_VERSION_PATCH)

  MESSAGE ( "OPENVDB_PYTHON_VERSION_MAJOR = ${OPENVDB_PYTHON_VERSION_MAJOR}" )
  MESSAGE ( "OPENVDB_PYTHON_VERSION_MINOR = ${OPENVDB_PYTHON_VERSION_MINOR}" )

ENDIF ()
FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system thread ${OPENVDB_BOOST_PYTHON_LIBRARY_COMPONENT_NAME} )
FIND_PACKAGE ( ILMBase REQUIRED )
FIND_PACKAGE ( OpenEXR REQUIRED )
FIND_PACKAGE ( TBB REQUIRED )
FIND_PACKAGE ( ZLIB REQUIRED )
FIND_PACKAGE ( OpenGL REQUIRED )
FIND_PACKAGE ( Blosc REQUIRED )
FIND_PACKAGE ( Doxygen REQUIRED )

IF (APPLE)
  FIND_LIBRARY ( COCOA_LIBRARY Cocoa )
  FIND_LIBRARY ( IOKIT_LIBRARY IOKit )
  FIND_LIBRARY ( COREVIDEO_LIBRARY CoreVideo )
ENDIF ()

INCLUDE_DIRECTORIES ( ${Boost_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( ${ILMBASE_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES ( ${TBB_INCLUDE_DIR} )
# INCLUDE_DIRECTORIES ( ${OPENGL_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( ${ZLIB_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( ${GLFW_INCLUDE_DIRECTORY} )
IF (WIN32)
  INCLUDE_DIRECTORIES ( ${GLEW_INCLUDE_DIR} )
ENDIF ()
INCLUDE_DIRECTORIES ( .. ) # So they can simulate referencing installed headers
INCLUDE_DIRECTORIES ( . ) # So they can simulate referencing installed headers

IF (WIN32)
  # Because of implicit linking!
  LINK_DIRECTORIES ( ${Boost_LIBRARY_DIR} )
ENDIF ()

INCLUDE_DIRECTORIES ( ${BLOSC_INCLUDE_DIR} )

IF (WIN32)
  ADD_DEFINITIONS ( -D_WIN32 -DNOMINMAX -DHALF_EXPORTS -DOPENVDB_DLL )
ELSE ()
  ADD_DEFINITIONS ( -pthread -fPIC )
ENDIF ()

# Working around hardcoding of path at DWA
FILE ( GLOB VIEWER_SOURCE_FILES RELATIVE ${PROJECT_SOURCE_DIR} viewer/* )
FILE ( MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
FILE ( COPY ${VIEWER_SOURCE_FILES} DESTINATION ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
INCLUDE_DIRECTORIES ( ${CMAKE_BINARY_DIR}/dwa )

SET ( OPENVDB_LIBRARY_SOURCE_FILES
  Grid.cc
  MetaMap.cc
  Metadata.cc
  Platform.cc
  io/Archive.cc
  io/Compression.cc
  io/File.cc
  io/GridDescriptor.cc
  io/Queue.cc
  io/Stream.cc
  io/TempFile.cc
  math/Maps.cc
  math/Proximity.cc
  math/QuantizedUnitVec.cc
  math/Transform.cc
  openvdb.cc
  util/Formats.cc
  util/Util.cc
  )

SET_SOURCE_FILES_PROPERTIES ( ${OPENVDB_LIBRARY_SOURCE_FILES}
  PROPERTIES
  COMPILE_FLAGS "-DOPENVDB_PRIVATE -DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
)

ADD_LIBRARY ( openvdb_static STATIC
  ${OPENVDB_LIBRARY_SOURCE_FILES}
  )
ADD_LIBRARY ( openvdb_shared SHARED
  ${OPENVDB_LIBRARY_SOURCE_FILES}
  )

TARGET_LINK_LIBRARIES ( openvdb_static
  ${Boost_LIBRARIES}
  ${PYTHON_LIBRARY}
  ${Tbb_TBB_LIBRARY}
  ${Ilmbase_HALF_LIBRARY}
  ${ZLIB_LIBRARY}
  )
TARGET_LINK_LIBRARIES ( openvdb_shared
  ${Boost_LIBRARIES}
  ${PYTHON_LIBRARY}
  ${Tbb_TBB_LIBRARY}
  ${Ilmbase_HALF_LIBRARY}
  ${ZLIB_LIBRARY}
  ${BLOSC_blosc_LIBRARY} 
  )

SET_TARGET_PROPERTIES ( openvdb_static openvdb_shared
  PROPERTIES OUTPUT_NAME openvdb
  )

SET ( VDB_PRINT_SOURCE_FILES  cmd/openvdb_print/main.cc )
SET_SOURCE_FILES_PROPERTIES ( ${VDB_PRINT_SOURCE_FILES}
  PROPERTIES
  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
)

ADD_EXECUTABLE ( vdb_print
  ${VDB_PRINT_SOURCE_FILES}
  )

TARGET_LINK_LIBRARIES ( vdb_print
  openvdb_static
  ${BLOSC_blosc_LIBRARY} 
  )

SET ( VDB_RENDER_SOURCE_FILES cmd/openvdb_render/main.cc )
SET_SOURCE_FILES_PROPERTIES ( ${VDB_RENDER_SOURCE_FILES}
  PROPERTIES
  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
)
ADD_EXECUTABLE ( vdb_render
  ${VDB_RENDER_SOURCE_FILES}
  )

TARGET_LINK_LIBRARIES ( vdb_render
  openvdb_static
  ${BLOSC_blosc_LIBRARY} 
  ${Openexr_ILMIMF_LIBRARY}
  ${Ilmbase_ILMTHREAD_LIBRARY}
  ${Ilmbase_IEX_LIBRARY}
  )

SET ( VDB_VIEW_SOURCE_FILES
  cmd/openvdb_view/main.cc
  viewer/Camera.cc
  viewer/ClipBox.cc
  viewer/Font.cc
  viewer/RenderModules.cc
  viewer/Viewer.cc
 )
SET_SOURCE_FILES_PROPERTIES ( ${VDB_VIEW_SOURCE_FILES}
  PROPERTIES
  COMPILE_FLAGS "-DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG} -DGL_GLEXT_PROTOTYPES=1"
  )
IF (NOT WIN32)
  ADD_EXECUTABLE ( vdb_view
	${VDB_VIEW_SOURCE_FILES}
	)

TARGET_LINK_LIBRARIES ( vdb_view
  openvdb_static
  ${BLOSC_blosc_LIBRARY} 
  ${OPENGL_gl_LIBRARY}
  ${OPENGL_glu_LIBRARY}
  ${COCOA_LIBRARY}
  ${IOKIT_LIBRARY}
  ${COREVIDEO_LIBRARY}
  ${GLFW_LINK_LIBRARY}
  ${GLFW_DEPENDENT_LIBRARIES}
  ${GLEW_GLEW_LIBRARY}
  )
ENDIF ()

IF ( OPENVDB_BUILD_PYTHON_MODULE )

  SET ( OPENVDB_PYTHON_MODULE_SOURCE_FILES
    python/pyFloatGrid.cc
    python/pyIntGrid.cc
    python/pyMetadata.cc
    python/pyOpenVDBModule.cc
    python/pyTransform.cc
    python/pyVec3Grid.cc
	)

  SET_SOURCE_FILES_PROPERTIES ( ${OPENVDB_PYTHON_MODULE_SOURCE_FILES}
	PROPERTIES
	COMPILE_FLAGS "-DOPENVDB_PRIVATE -DOPENVDB_USE_BLOSC ${OPENVDB_USE_GLFW_FLAG}"
	)
  
  ADD_LIBRARY ( pyopenvdb SHARED
	${OPENVDB_PYTHON_MODULE_SOURCE_FILES}
	)

  TARGET_LINK_LIBRARIES ( pyopenvdb
	openvdb_static
	${BLOSC_blosc_LIBRARY} 
	${OPENGL_gl_LIBRARY}
	${OPENGL_glu_LIBRARY}
	${COCOA_LIBRARY}
	${IOKIT_LIBRARY}
	${COREVIDEO_LIBRARY}
	${GLFW_LINK_LIBRARY}
	${GLFW_DEPENDENT_LIBRARIES}
	${GLEW_GLEW_LIBRARY}
	${Boost_LIBRARIES}
	${PYTHON_LIBRARY}
	)

  SET_TARGET_PROPERTIES ( pyopenvdb PROPERTIES
    PREFIX ""
    )

  INSTALL ( TARGETS
	pyopenvdb
	DESTINATION
	lib/python${OPENVDB_PYTHON_VERSION_MAJOR}.${OPENVDB_PYTHON_VERSION_MINOR}
	)

ENDIF ( OPENVDB_BUILD_PYTHON_MODULE )

# Doxygen docmentation
FILE ( READ ${PROJECT_SOURCE_DIR}/doxygen-config DOXYGEN_CONFIG_CONTENT )
FILE ( WRITE ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config ${DOXYGEN_CONFIG_CONTENT} )
FILE ( APPEND ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config "OUTPUT_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}/doc\n" )

ADD_CUSTOM_TARGET ( doc
  ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/cmake-doxygen-config
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
  COMMENT "Generating API documentation with Doxygen" VERBATIM
)

INSTALL ( DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/html/ DESTINATION doc)

# Installation
IF ( NOT WIN32 )
  INSTALL ( TARGETS
	vdb_view
	DESTINATION
	bin
	)
ENDIF ()
INSTALL ( TARGETS
  vdb_print
  vdb_render
  DESTINATION
  bin
  )

INSTALL ( TARGETS
  openvdb_static
  openvdb_shared
  DESTINATION
  lib
  )

INSTALL ( DIRECTORY ${PROJECT_SOURCE_DIR} DESTINATION include
          FILES_MATCHING PATTERN "*.h")
