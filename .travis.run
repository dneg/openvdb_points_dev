#!/usr/bin/env bash

set -x

TASK="$1"
ABI="$2"
MULTIBUFFER="$3"
BLOSC="$4"
RELEASE="$5"
HOUDINI_MAJOR="$6"
HOUDINI_BUILD="$7"

COMMON_ARGS="DESTDIR=/tmp/OpenVDB_3_2_0 CONCURRENT_MALLOC_LIB= DOXYGEN= LOG4CPLUS_INCL_DIR= PYTHON_INCL_DIR= GLFW_INCL_DIR="

STANDALONE_ARGS="BOOST_LIB_DIR=/usr/lib/x86_64-linux-gnu EXR_INCL_DIR=/usr/include/OpenEXR EXR_LIB_DIR=/usr/local/lib TBB_LIB_DIR=/usr/lib"
HOUDINI_ARGS="BOOST_INCL_DIR=/test/hou/toolkit/include BOOST_LIB_DIR=/test/hou/dsolib TBB_LIB_DIR=/test/hou/dsolib EXR_INCL_DIR=/test/hou/toolkit/include EXR_LIB_DIR=/test/hou/dsolib"

STANDALONE_BLOSC_ARGS="BLOSC_INCL_DIR=/test/blosc/include BLOSC_LIB_DIR=/test/blosc/lib"
HOUDINI_BLOSC_ARGS="BLOSC_INCL_DIR=/test/hou/toolkit/include BLOSC_LIB_DIR=/test/hou/dsolib"
NO_BLOSC_ARGS="BLOSC_INCL_DIR= BLOSC_LIB_DIR="

if [ "$TASK" = "pre_install" ]; then
    # install main pre-requisites
    sudo apt-get update
    sudo apt-get install -y libboost-all-dev
    sudo apt-get install -y libtbb-dev
    sudo apt-get install -y libcppunit-dev
    # sym-links reduce command word lengths
    sudo ln -s $PWD /test
    cd /test
    # enable all warnings and treat them as errors
    sed -i 's/-pthread/-pthread -Wall -Wextra -Werror -pedantic/g' openvdb_points*/Makefile
    # only enable code coverage for GCC, debug, non-Houdini configurations
    if [ "$CXX" = "g++" ]; then
        if [ "$RELEASE" = "no" ]; then
            if [ "$HOUDINI_BUILD" = "none" ]; then
                sed -i 's/-pthread/--coverage -pthread/g' openvdb_points*/Makefile
            fi
        fi
    fi
    if [ "$MULTIBUFFER" = "yes" ]; then
        # download and unpack multibuffer openvdb core library
        wget http://github.com/dneg/openvdb_upstream/archive/multibufferio.zip
        unzip multibufferio.zip
        mv openvdb_upstream-multibufferio/openvdb openvdb
        mv openvdb_upstream-multibufferio/openvdb_houdini openvdb_houdini
    else
        # download and unpack openvdb core library
        wget http://github.com/dreamworksanimation/openvdb/archive/v3.2.0.zip
        unzip v3.2.0.zip
        mv openvdb-3.2.0/openvdb openvdb
        mv openvdb-3.2.0/openvdb_houdini openvdb_houdini
    fi
    if [ "$BLOSC" = "yes" ]; then
        wget https://github.com/Blosc/c-blosc/archive/v1.5.0.zip
        unzip v1.5.0.zip
        cd c-blosc-1.5.0
        mkdir -p /test/blosc
        cmake -DCMAKE_INSTALL_PREFIX=/test/blosc
        make
        make install
        cd -
    fi
    if [ "$HOUDINI_BUILD" != "none" ]; then
        # install houdini pre-requisites
        sudo apt-get install -y libxi-dev
        sudo apt-get install -y csh
        # houdini builds fail due to unused local typedef warnings in boost::bind so disable this
        sed -i 's/HCUSTOM_EXTRA_CFLAGS := /HCUSTOM_EXTRA_CFLAGS := -Wno-unused-local-typedefs /g' openvdb_points_houdini/Makefile
        # download and unpack houdini headers and libraries from public FTP
        wget ftp://ftp.sidefx.com/indie/$HOUDINI_MAJOR/$HOUDINI_BUILD.tar.gz
        tar -xzf $HOUDINI_BUILD.tar.gz
        ln -s $HOUDINI_BUILD hou
        cd hou
        tar -xzf houdini.tar.gz
        cd -
    fi
elif [ "$TASK" = "install" ]; then
    if [ "$HOUDINI_BUILD" = "none" ]; then
        # openvdb for standalone
        if [ "$ABI" = "2" ]; then
            if [ "$BLOSC" = "yes" ]; then
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS install abi=2 multibuffer=yes -j
                else
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS install abi=2 debug=yes multibuffer=yes -j
                fi
            else
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS install abi=2 multibuffer=yes -j
                else
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS install abi=2 debug=yes multibuffer=yes -j
                fi
            fi
        else
            if [ "$BLOSC" = "yes" ]; then
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS install multibuffer=yes -j
                else
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS install debug=yes multibuffer=yes -j
                fi
            else
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS install multibuffer=yes -j
                else
                    make -C openvdb $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS install debug=yes multibuffer=yes -j
                fi
            fi
        fi
    else
        cd hou
        source houdini_setup
        cd -
        make -C openvdb $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS install multibuffer=yes -j
        # openvdb houdini (lib only)
        make -C openvdb_houdini $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS houdinilib multibuffer=yes -j
        # manually install only headers and lib (to avoid building openvdb houdini SOPs)
        mkdir houdini_utils
        cp openvdb_houdini/houdini/*.h openvdb_houdini
        cp openvdb_houdini/houdini/*.h houdini_utils
        cp openvdb_houdini/libopenvdb_houdini* /tmp/OpenVDB_3_2_0/lib
    fi
elif [ "$TASK" = "script" ]; then
    if [ "$HOUDINI_BUILD" = "none" ]; then
        # openvdb points for standalone
        if [ "$ABI" = "2" ]; then
            if [ "$BLOSC" = "yes" ]; then
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS test abi=2 multibuffer=yes -j
                else
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS test abi=2 debug=yes multibuffer=yes -j
                fi
            else
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS test abi=2 multibuffer=yes -j
                else
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS test abi=2 debug=yes multibuffer=yes -j
                fi
            fi
        else
            if [ "$BLOSC" = "yes" ]; then
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS test multibuffer=yes -j
                else
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $STANDALONE_BLOSC_ARGS test debug=yes multibuffer=yes -j
                fi
            else
                if [ "$RELEASE" = "yes" ]; then
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS test multibuffer=yes -j
                else
                    make -C openvdb_points $COMMON_ARGS $STANDALONE_ARGS $NO_BLOSC_ARGS test debug=yes multibuffer=yes -j
                fi
            fi
        fi
    else
        cd hou
        source houdini_setup
        cd -
        # openvdb points for houdini
        make -C openvdb_points $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS install multibuffer=yes -j
        # openvdb points houdini (lib and SOPs)
        make -C openvdb_points_houdini $COMMON_ARGS $HOUDINI_ARGS $HOUDINI_BLOSC_ARGS all multibuffer=yes -j
    fi
fi
